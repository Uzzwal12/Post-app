{"version":3,"sources":["context/auth.js","utils/authRoute.js","components/menuBar.js","utils/myPopup.js","components/likeButton.js","utils/graphlql.js","components/deleteButton.js","components/postCard.js","utils/hooks.js","components/postForm.js","pages/home.js","pages/login.js","pages/register.js","pages/singlePost.js","App.js","ApolloClient/index.js","index.js"],"names":["initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathname","window","location","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likes","likeCount","liked","setLiked","useEffect","find","like","useMutation","variables","postId","onError","err","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","mutation","confirmOpen","setConfirmOpen","update","proxy","getPosts","readQuery","query","filter","writeQuery","data","deletePost","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","handleChange","target","onSubmit","event","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","onChange","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","Grid","columns","Row","Column","Transition","Group","map","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","CREATE_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkUp","comment","setComment","match","params","createComment","getPost","comments","width","console","log","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.3c35720c.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst initialState = {\r\n  user: null,\r\n};\r\n\r\nif (localStorage.getItem(\"jwtToken\")) {\r\n  const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\r\n\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem(\"jwtToken\");\r\n  } else {\r\n    initialState.user = decodedToken;\r\n  }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  login: (userData) => {},\r\n  logout: () => {},\r\n});\r\n\r\nfunction authReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n\r\n    case \"LOGOUT\":\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  function login(userData) {\r\n    localStorage.setItem(\"jwtToken\", userData.token);\r\n    dispatch({\r\n      type: \"LOGIN\",\r\n      payload: userData,\r\n    });\r\n  }\r\n\r\n  function logout() {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    dispatch({\r\n      type: \"LOGOUT\",\r\n    });\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user: state.user, login, logout }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { AuthContext, AuthProvider };\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nconst AuthRoute = ({ component: Component, ...rest }) => {\r\n  const { user } = useContext(AuthContext);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthRoute;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nconst MenuBar = () => {\r\n  const { user, logout } = useContext(AuthContext);\r\n  const pathname = window.location.pathname;\r\n  const path = pathname === \"/\" ? \"home\" : pathname.substr(1);\r\n  const [activeItem, setActiveItem] = useState(path);\r\n  const handleItemClick = (e, { name }) => setActiveItem(name);\r\n\r\n  const menuBar = user ? (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\r\n\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item name=\"logout\" onClick={logout} />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  ) : (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n      <Menu.Item\r\n        name=\"home\"\r\n        active={activeItem === \"home\"}\r\n        onClick={handleItemClick}\r\n        as={Link}\r\n        to=\"/\"\r\n      />\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item\r\n          name=\"login\"\r\n          active={activeItem === \"login\"}\r\n          onClick={handleItemClick}\r\n          as={Link}\r\n          to=\"/login\"\r\n        />\r\n        <Menu.Item\r\n          name=\"register\"\r\n          active={activeItem === \"register\"}\r\n          onClick={handleItemClick}\r\n          as={Link}\r\n          to=\"/register\"\r\n        />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  );\r\n\r\n  return menuBar;\r\n};\r\n\r\nexport default MenuBar;\r\n","import React from \"react\";\r\nimport { Popup } from \"semantic-ui-react\";\r\n\r\nconst MyPopup = ({ content, children }) => {\r\n  return <Popup inverted content={content} trigger={children} />;\r\n};\r\n\r\nexport default MyPopup;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Button, Icon, Label } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\n\r\nimport MyPopup from \"../utils/myPopup\";\r\n\r\nconst LikeButton = ({ user, post: { id, likes, likeCount } }) => {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((like) => like.username === user.username)) {\r\n      setLiked(true);\r\n    } else setLiked(false);\r\n  }, [user, likes]);\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id },\r\n    onError(err) {\r\n      return err;\r\n    },\r\n  });\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color=\"blue\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    ) : (\r\n      <Button color=\"blue\" basic>\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    )\r\n  ) : (\r\n    <Button as={Link} to=\"/login\" color=\"blue\" basic>\r\n      <Icon name=\"heart\" />\r\n    </Button>\r\n  );\r\n  return (\r\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\r\n      <MyPopup content={liked ? \"Unlike\" : \"Like\"}>{likeButton}</MyPopup>\r\n      <Label basic color=\"blue\" pointing=\"left\">\r\n        {likeCount}\r\n      </Label>\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default LikeButton;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n{\r\n  getPosts {\r\n    id\r\n    body\r\n    createdAt\r\n    username\r\n    likeCount\r\n    likes {\r\n      username\r\n    }\r\n    commentCount\r\n    comments {\r\n      id\r\n      username\r\n      createdAt\r\n      body\r\n    }\r\n  }\r\n}\r\n`;","import React, { useState } from \"react\";\r\nimport { Button, Icon, Confirm } from \"semantic-ui-react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport MyPopup from \"../utils/myPopup\";\r\nimport { FETCH_POSTS_QUERY } from \"../utils/graphlql\";\r\n\r\nconst DeleteButton = ({ postId, commentId, callback }) => {\r\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\r\n  const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n  const [deletePost] = useMutation(mutation, {\r\n    update(proxy) {\r\n      setConfirmOpen(false);\r\n      if (!commentId) {\r\n        const data = proxy.readQuery({ query: FETCH_POSTS_QUERY });\r\n        const getPosts = data.getPosts.filter((post) => post.id !== postId);\r\n        proxy.writeQuery({\r\n          query: FETCH_POSTS_QUERY,\r\n          data: {\r\n            getPosts,\r\n          },\r\n        });\r\n      }\r\n      if (callback) callback();\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n    onError(err) {},\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <MyPopup content={commentId ? \"Delete comment\" : \"Delete post\"}>\r\n        <Button\r\n          as=\"div\"\r\n          color=\"red\" \r\n          floated=\"right\"\r\n          onClick={() => setConfirmOpen(true)}\r\n        >\r\n          <Icon name=\"trash\" style={{ margin: 0 }} />\r\n        </Button>\r\n      </MyPopup>\r\n      <Confirm\r\n        open={confirmOpen}\r\n        onCancel={() => setConfirmOpen(false)}\r\n        onConfirm={deletePost}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId)\r\n  }\r\n`;\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default DeleteButton;\r\n","import React, { useContext } from \"react\";\r\nimport { Card, Icon, Label, Image, Button } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport MyPopup from \"../utils/myPopup\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport LikeButton from \"../components/likeButton\";\r\nimport DeleteButton from \"../components/deleteButton\";\r\n\r\nconst PostCard = ({\r\n  post: {\r\n    id,\r\n    body,\r\n    createdAt,\r\n    username,\r\n    likeCount,\r\n    commentCount,\r\n    likes,\r\n  },\r\n}) => {\r\n  const { user } = useContext(AuthContext);\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Image\r\n          floated=\"right\"\r\n          size=\"mini\"\r\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n        />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/posts/${id}`}>\r\n          {moment(createdAt).fromNow(true)}\r\n        </Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <LikeButton post={{ id, likes, likeCount }} user={user} />\r\n        <MyPopup content=\"Comment on post\">\r\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n            <Button color=\"black\" basic>\r\n              <Icon name=\"comments\" />\r\n            </Button>\r\n            <Label basic color=\"black\" pointing=\"left\">\r\n              {commentCount}\r\n            </Label>\r\n          </Button>\r\n        </MyPopup>\r\n\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = (callback, initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n  const handleChange = (e) => {\r\n    setValues({ ...values, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    callback();\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    onSubmit,\r\n    values,\r\n  };\r\n};\r\n","import gql from \"graphql-tag\";\r\nimport React from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { useForm } from \"../utils/hooks\";\r\nimport { FETCH_POSTS_QUERY } from \"../utils/graphlql\";\r\n\r\nconst PostForm = () => {\r\n  const { onSubmit, handleChange, values } = useForm(createPostCallback, {\r\n    body: \"\",\r\n  });\r\n\r\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: values,\r\n    update(proxy, result) {\r\n      const data = proxy.readQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n      });\r\n\r\n      const getPosts = [result.data.createPost, ...data.getPosts];\r\n\r\n      proxy.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: {\r\n          getPosts,\r\n        },\r\n      });\r\n      values.body = \"\";\r\n    },\r\n    onError(err) {},\r\n  });\r\n\r\n  function createPostCallback() {\r\n    createPost();\r\n  }\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit}>\r\n        <h2>Create post:</h2>\r\n        <Form.Field>\r\n          <Form.Input\r\n            placeholder=\"Post App\"\r\n            name=\"body\"\r\n            onChange={handleChange}\r\n            value={values.body}\r\n            error={error ? true : false}\r\n          />\r\n          <Button type=\"submit\" color=\"teal\">\r\n            Submit\r\n          </Button>\r\n        </Form.Field>\r\n      </Form>\r\n      {error && (\r\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\r\n          <ul className=\"list\">\r\n            <li>{error.graphQLErrors[0].message}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likes {\r\n        id\r\n        username\r\n        createdAt\r\n      }\r\n      likeCount\r\n      comments {\r\n        id\r\n        body\r\n        username\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostForm;\r\n","import React, { useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Grid, Transition } from \"semantic-ui-react\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport PostCard from \"../components/postCard\";\r\nimport PostForm from \"../components/postForm\";\r\nimport { FETCH_POSTS_QUERY } from \"../utils/graphlql\";\r\n\r\nconst Home = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY);\r\n\r\n  return (\r\n    <Grid columns={3}>\r\n      <Grid.Row className=\"page-title\">\r\n        <h1>Recent Post</h1>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        {user && (\r\n          <Grid.Column>\r\n            <PostForm />\r\n          </Grid.Column>\r\n        )}\r\n        {loading ? (\r\n          <h1>Loading...</h1>\r\n        ) : (\r\n          <Transition.Group>\r\n            {data.getPosts &&\r\n              data.getPosts.map((post) => (\r\n                <Grid.Column key={post.id}>\r\n                  <PostCard post={post} />\r\n                </Grid.Column>\r\n              ))}\r\n          </Transition.Group>\r\n        )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState,useContext } from \"react\";\r\nimport { Form, Button } from \"semantic-ui-react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport { useForm } from \"../utils/hooks\";\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nconst Login = (props) => {\r\n  const context = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const { handleChange, onSubmit, values } = useForm(loginUserCallback, {\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(_, { data: { login: userData } }) {\r\n      context.login(userData);\r\n      props.history.push(\"/\");\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  function loginUserCallback() {\r\n    loginUser();\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n        <h1>Login</h1>\r\n        <Form.Input\r\n          type=\"text\"\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          placeholder=\"Username..\"\r\n          value={values.username}\r\n          onChange={handleChange}\r\n          error={errors.username ? true : false}\r\n        />\r\n        <Form.Input\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          placeholder=\"Password..\"\r\n          value={values.password}\r\n          onChange={handleChange}\r\n          error={errors.password ? true : false}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 ? (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((error) => (\r\n              <li key={error}>{error}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form, Button } from \"semantic-ui-react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport { useForm } from \"../utils/hooks\";\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nconst Register = (props) => {\r\n  const context = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n  const { handleChange, onSubmit, values } = useForm(registerUser, {\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(_, { data: { register: userData } }) {\r\n      context.login(userData);\r\n      props.history.push(\"/\");\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  function registerUser() {\r\n    addUser();\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\r\n        <h1>Register</h1>\r\n        <Form.Input\r\n          type=\"text\"\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          placeholder=\"Username..\"\r\n          value={values.username}\r\n          onChange={handleChange}\r\n          error={errors.username ? true : false}\r\n        />\r\n        <Form.Input\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          placeholder=\"Email..\"\r\n          value={values.email}\r\n          onChange={handleChange}\r\n          error={errors.email ? true : false}\r\n        />\r\n        <Form.Input\r\n          type=\"password\"\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          placeholder=\"Password..\"\r\n          value={values.password}\r\n          onChange={handleChange}\r\n          error={errors.password ? true : false}\r\n        />\r\n        <Form.Input\r\n          type=\"password\"\r\n          label=\"Confirm Password\"\r\n          name=\"confirmPassword\"\r\n          placeholder=\"Confirm Password..\"\r\n          value={values.confirmPassword}\r\n          onChange={handleChange}\r\n          error={errors.confirmPassword ? true : false}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Register\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 ? (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((error) => (\r\n              <li key={error}>{error}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Register;\r\n","import React, { useContext, useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  Image,\r\n  Button,\r\n  Icon,\r\n  Label,\r\n  Form,\r\n} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\nimport LikeButton from \"../components/likeButton\";\r\nimport DeleteButton from \"../components/deleteButton\";\r\n\r\nconst SinglePost = (props) => {\r\n  const { user } = useContext(AuthContext);\r\n  const [comment, setComment] = useState(\"\");\r\n  const postId = props.match.params.postId;\r\n\r\n  const { data } = useQuery(FETCH_POST_QUERY, {\r\n    variables: {\r\n      postId,\r\n    },\r\n  });\r\n\r\n  const [createComment] = useMutation(CREATE_COMMENT_MUTATION, {\r\n    update() {\r\n      setComment(\"\");\r\n    },\r\n    variables: {\r\n      postId,\r\n      body: comment,\r\n    },\r\n  });\r\n\r\n  let postMarkUp;\r\n\r\n  if (!data) {\r\n    postMarkUp = <p>Loading...</p>;\r\n  } else {\r\n    const {\r\n      id,\r\n      username,\r\n      body,\r\n      createdAt,\r\n      likeCount,\r\n      likes,\r\n      comments,\r\n      commentCount,\r\n    } = data.getPost;\r\n\r\n    function deletePostCallback() {\r\n      props.history.push(\"/\");\r\n    }\r\n\r\n    postMarkUp = (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={2}>\r\n            <Image\r\n              floated=\"right\"\r\n              size=\"small\"\r\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={10}>\r\n            <Card fluid>\r\n              <Card.Content>\r\n                <Card.Header>{username}</Card.Header>\r\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n              </Card.Content>\r\n              <hr />\r\n              <Card.Content extra>\r\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\r\n                <Button\r\n                  as=\"div\"\r\n                  labelPosition=\"right\"\r\n                  onClick={() => console.log(\"Button on post\")}\r\n                >\r\n                  <Button basic color=\"blue\">\r\n                    <Icon name=\"comments\" />\r\n                  </Button>\r\n                  <Label basic color=\"blue\" pointing=\"left\">\r\n                    {commentCount}\r\n                  </Label>\r\n                </Button>\r\n                {user && user.username === username && (\r\n                  <DeleteButton postId={id} callback={deletePostCallback} />\r\n                )}\r\n              </Card.Content>\r\n            </Card>\r\n            {user && (\r\n              <Card fluid>\r\n                <Card.Content>\r\n                  <p>Post a comment</p>\r\n                  <Form>\r\n                    <div className=\"ui action input fluid\">\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"comment\"\r\n                        value={comment}\r\n                        placeholder=\"Comment..\"\r\n                        onChange={(event) => setComment(event.target.value)}\r\n                      />\r\n                      <Button\r\n                        type=\"submit\"\r\n                        className=\"ui button blue\"\r\n                        disabled={comment.trim() === \"\"}\r\n                        onClick={createComment}\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </div>\r\n                  </Form>\r\n                </Card.Content>\r\n              </Card>\r\n            )}\r\n            {comments.map((comment) => (\r\n              <Card fluid key={comment.id}>\r\n                <Card.Content>\r\n                  {user && user.username === comment.username && (\r\n                    <DeleteButton postId={id} commentId={comment.id} />\r\n                  )}\r\n                  <Card.Header>{comment.username}</Card.Header>\r\n                  <Card.Meta>{moment(comment.createdAt).fromNow}</Card.Meta>\r\n                  <Card.Description>{comment.body}</Card.Description>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n  return postMarkUp;\r\n};\r\n\r\nconst CREATE_COMMENT_MUTATION = gql`\r\n  mutation($postId: String!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      comments {\r\n        id\r\n        body\r\n        createdAt\r\n        username\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n  query($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likeCount\r\n      likes {\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default SinglePost;\r\n","import React from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\nimport { AuthProvider } from \"./context/auth\";\nimport AuthRoute from \"./utils/authRoute\";\nimport MenuBar from \"./components/menuBar\";\nimport Home from \"./pages/home\";\nimport Login from \"./pages/login\";\nimport Register from \"./pages/register\";\nimport SinglePost from \"./pages/singlePost\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Switch>\n            <Route path=\"/posts/:postId\" component={SinglePost} />\n            <AuthRoute path=\"/login\" component={Login} />\n            <AuthRoute path=\"/register\" component={Register} />\n            <Route exact path=\"/\" component={Home} />\n          </Switch>\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport App from \"../App\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  createHttpLink,\r\n  ApolloProvider,\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"http://localhost:5000/graphql\",\r\n});\r\n\r\nconst authLink = setContext(() => { //setting token in headers\r\n  const token = localStorage.getItem(\"jwtToken\");\r\n  return {\r\n    headers: {\r\n      Authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n);\r\n","import ReactDOM from \"react-dom\";\nimport ApolloProvider from \"./ApolloClient\";\nReactDOM.render(ApolloProvider, document.getElementById(\"root\"));\n"],"sourceRoot":""}